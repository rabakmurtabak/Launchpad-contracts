/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export type CampaignDataStruct = {
  softCap: BigNumberish;
  hardCap: BigNumberish;
  start_date: BigNumberish;
  end_date: BigNumberish;
  rate: BigNumberish;
  min_allowed: BigNumberish;
  max_allowed: BigNumberish;
  pool_rate: BigNumberish;
  lock_duration: BigNumberish;
  liquidity_rate: BigNumberish;
  whitelist_enabled: boolean;
};

export type CampaignDataStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  boolean
] & {
  softCap: BigNumber;
  hardCap: BigNumber;
  start_date: BigNumber;
  end_date: BigNumber;
  rate: BigNumber;
  min_allowed: BigNumber;
  max_allowed: BigNumber;
  pool_rate: BigNumber;
  lock_duration: BigNumber;
  liquidity_rate: BigNumber;
  whitelist_enabled: boolean;
};

export interface PSIPadCampaignInterface extends ethers.utils.Interface {
  functions: {
    "addWhitelist(bytes,bool)": FunctionFragment;
    "buyTokens()": FunctionFragment;
    "calculateAmount(uint256)": FunctionFragment;
    "campaignTokens()": FunctionFragment;
    "collected()": FunctionFragment;
    "doRefund()": FunctionFragment;
    "emergencyRefund()": FunctionFragment;
    "end_date()": FunctionFragment;
    "factory_address()": FunctionFragment;
    "failed()": FunctionFragment;
    "feeTokens()": FunctionFragment;
    "finalized()": FunctionFragment;
    "getGivenAmount(address)": FunctionFragment;
    "getRemaining()": FunctionFragment;
    "hardCap()": FunctionFragment;
    "initialize((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,bool),address,address,address,address,uint256,uint256,uint256)": FunctionFragment;
    "isLive()": FunctionFragment;
    "liquidity_rate()": FunctionFragment;
    "lock()": FunctionFragment;
    "lock_duration()": FunctionFragment;
    "locked()": FunctionFragment;
    "lp_address()": FunctionFragment;
    "max_allowed()": FunctionFragment;
    "min_allowed()": FunctionFragment;
    "owner()": FunctionFragment;
    "pool_rate()": FunctionFragment;
    "psipad_factory()": FunctionFragment;
    "rate()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "router_address()": FunctionFragment;
    "setLPAddress(address)": FunctionFragment;
    "setWhitelistEnabled(bool)": FunctionFragment;
    "softCap()": FunctionFragment;
    "stable_coin_fee()": FunctionFragment;
    "start_date()": FunctionFragment;
    "token()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unlock()": FunctionFragment;
    "unlock_date()": FunctionFragment;
    "whitelistEnabled()": FunctionFragment;
    "whitelisted(address)": FunctionFragment;
    "withdrawFunds()": FunctionFragment;
    "withdrawTokens()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addWhitelist",
    values: [BytesLike, boolean]
  ): string;
  encodeFunctionData(functionFragment: "buyTokens", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "calculateAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "campaignTokens",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "collected", values?: undefined): string;
  encodeFunctionData(functionFragment: "doRefund", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "emergencyRefund",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "end_date", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "factory_address",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "failed", values?: undefined): string;
  encodeFunctionData(functionFragment: "feeTokens", values?: undefined): string;
  encodeFunctionData(functionFragment: "finalized", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getGivenAmount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getRemaining",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "hardCap", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      CampaignDataStruct,
      string,
      string,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(functionFragment: "isLive", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "liquidity_rate",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "lock", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "lock_duration",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "locked", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "lp_address",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "max_allowed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "min_allowed",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pool_rate", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "psipad_factory",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "rate", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "router_address",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setLPAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setWhitelistEnabled",
    values: [boolean]
  ): string;
  encodeFunctionData(functionFragment: "softCap", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "stable_coin_fee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "start_date",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "unlock", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "unlock_date",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "whitelisted", values: [string]): string;
  encodeFunctionData(
    functionFragment: "withdrawFunds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawTokens",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "addWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "buyTokens", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calculateAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "campaignTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "collected", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "doRefund", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "emergencyRefund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "end_date", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "factory_address",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "failed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "feeTokens", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "finalized", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getGivenAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRemaining",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hardCap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isLive", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "liquidity_rate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lock", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lock_duration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "locked", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lp_address", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "max_allowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "min_allowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pool_rate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "psipad_factory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "router_address",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLPAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWhitelistEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "softCap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stable_coin_fee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "start_date", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unlock", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "unlock_date",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawTokens",
    data: BytesLike
  ): Result;

  events: {
    "CampaignLocked(uint256)": EventFragment;
    "CampaignUnlocked()": EventFragment;
    "Initialized(address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "TokensBought(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CampaignLocked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CampaignUnlocked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokensBought"): EventFragment;
}

export type CampaignLockedEvent = TypedEvent<
  [BigNumber],
  { collected: BigNumber }
>;

export type CampaignLockedEventFilter = TypedEventFilter<CampaignLockedEvent>;

export type CampaignUnlockedEvent = TypedEvent<[], {}>;

export type CampaignUnlockedEventFilter =
  TypedEventFilter<CampaignUnlockedEvent>;

export type InitializedEvent = TypedEvent<[string], { owner: string }>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type TokensBoughtEvent = TypedEvent<
  [string, BigNumber],
  { user: string; value: BigNumber }
>;

export type TokensBoughtEventFilter = TypedEventFilter<TokensBoughtEvent>;

export interface PSIPadCampaign extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PSIPadCampaignInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addWhitelist(
      data: BytesLike,
      whitelist: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    buyTokens(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    calculateAmount(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    campaignTokens(overrides?: CallOverrides): Promise<[BigNumber]>;

    collected(overrides?: CallOverrides): Promise<[BigNumber]>;

    doRefund(overrides?: CallOverrides): Promise<[boolean]>;

    emergencyRefund(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    end_date(overrides?: CallOverrides): Promise<[BigNumber]>;

    factory_address(overrides?: CallOverrides): Promise<[string]>;

    failed(overrides?: CallOverrides): Promise<[boolean]>;

    feeTokens(overrides?: CallOverrides): Promise<[BigNumber]>;

    finalized(overrides?: CallOverrides): Promise<[boolean]>;

    getGivenAmount(
      _address: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getRemaining(overrides?: CallOverrides): Promise<[BigNumber]>;

    hardCap(overrides?: CallOverrides): Promise<[BigNumber]>;

    initialize(
      _data: CampaignDataStruct,
      _token: string,
      _owner: string,
      _factory_address: string,
      _router_address: string,
      _stable_coin_fee: BigNumberish,
      _campaignTokens: BigNumberish,
      _feeTokens: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isLive(overrides?: CallOverrides): Promise<[boolean]>;

    liquidity_rate(overrides?: CallOverrides): Promise<[BigNumber]>;

    lock(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lock_duration(overrides?: CallOverrides): Promise<[BigNumber]>;

    locked(overrides?: CallOverrides): Promise<[boolean]>;

    lp_address(overrides?: CallOverrides): Promise<[string]>;

    max_allowed(overrides?: CallOverrides): Promise<[BigNumber]>;

    min_allowed(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pool_rate(overrides?: CallOverrides): Promise<[BigNumber]>;

    psipad_factory(overrides?: CallOverrides): Promise<[string]>;

    rate(overrides?: CallOverrides): Promise<[BigNumber]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    router_address(overrides?: CallOverrides): Promise<[string]>;

    setLPAddress(
      _lp_address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setWhitelistEnabled(
      enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    softCap(overrides?: CallOverrides): Promise<[BigNumber]>;

    stable_coin_fee(overrides?: CallOverrides): Promise<[BigNumber]>;

    start_date(overrides?: CallOverrides): Promise<[BigNumber]>;

    token(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unlock(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unlock_date(overrides?: CallOverrides): Promise<[BigNumber]>;

    whitelistEnabled(overrides?: CallOverrides): Promise<[boolean]>;

    whitelisted(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    withdrawFunds(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawTokens(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addWhitelist(
    data: BytesLike,
    whitelist: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  buyTokens(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  calculateAmount(
    _amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  campaignTokens(overrides?: CallOverrides): Promise<BigNumber>;

  collected(overrides?: CallOverrides): Promise<BigNumber>;

  doRefund(overrides?: CallOverrides): Promise<boolean>;

  emergencyRefund(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  end_date(overrides?: CallOverrides): Promise<BigNumber>;

  factory_address(overrides?: CallOverrides): Promise<string>;

  failed(overrides?: CallOverrides): Promise<boolean>;

  feeTokens(overrides?: CallOverrides): Promise<BigNumber>;

  finalized(overrides?: CallOverrides): Promise<boolean>;

  getGivenAmount(
    _address: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRemaining(overrides?: CallOverrides): Promise<BigNumber>;

  hardCap(overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    _data: CampaignDataStruct,
    _token: string,
    _owner: string,
    _factory_address: string,
    _router_address: string,
    _stable_coin_fee: BigNumberish,
    _campaignTokens: BigNumberish,
    _feeTokens: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isLive(overrides?: CallOverrides): Promise<boolean>;

  liquidity_rate(overrides?: CallOverrides): Promise<BigNumber>;

  lock(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lock_duration(overrides?: CallOverrides): Promise<BigNumber>;

  locked(overrides?: CallOverrides): Promise<boolean>;

  lp_address(overrides?: CallOverrides): Promise<string>;

  max_allowed(overrides?: CallOverrides): Promise<BigNumber>;

  min_allowed(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  pool_rate(overrides?: CallOverrides): Promise<BigNumber>;

  psipad_factory(overrides?: CallOverrides): Promise<string>;

  rate(overrides?: CallOverrides): Promise<BigNumber>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  router_address(overrides?: CallOverrides): Promise<string>;

  setLPAddress(
    _lp_address: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setWhitelistEnabled(
    enabled: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  softCap(overrides?: CallOverrides): Promise<BigNumber>;

  stable_coin_fee(overrides?: CallOverrides): Promise<BigNumber>;

  start_date(overrides?: CallOverrides): Promise<BigNumber>;

  token(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unlock(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unlock_date(overrides?: CallOverrides): Promise<BigNumber>;

  whitelistEnabled(overrides?: CallOverrides): Promise<boolean>;

  whitelisted(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  withdrawFunds(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawTokens(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addWhitelist(
      data: BytesLike,
      whitelist: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    buyTokens(overrides?: CallOverrides): Promise<void>;

    calculateAmount(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    campaignTokens(overrides?: CallOverrides): Promise<BigNumber>;

    collected(overrides?: CallOverrides): Promise<BigNumber>;

    doRefund(overrides?: CallOverrides): Promise<boolean>;

    emergencyRefund(overrides?: CallOverrides): Promise<void>;

    end_date(overrides?: CallOverrides): Promise<BigNumber>;

    factory_address(overrides?: CallOverrides): Promise<string>;

    failed(overrides?: CallOverrides): Promise<boolean>;

    feeTokens(overrides?: CallOverrides): Promise<BigNumber>;

    finalized(overrides?: CallOverrides): Promise<boolean>;

    getGivenAmount(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRemaining(overrides?: CallOverrides): Promise<BigNumber>;

    hardCap(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _data: CampaignDataStruct,
      _token: string,
      _owner: string,
      _factory_address: string,
      _router_address: string,
      _stable_coin_fee: BigNumberish,
      _campaignTokens: BigNumberish,
      _feeTokens: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    isLive(overrides?: CallOverrides): Promise<boolean>;

    liquidity_rate(overrides?: CallOverrides): Promise<BigNumber>;

    lock(overrides?: CallOverrides): Promise<void>;

    lock_duration(overrides?: CallOverrides): Promise<BigNumber>;

    locked(overrides?: CallOverrides): Promise<boolean>;

    lp_address(overrides?: CallOverrides): Promise<string>;

    max_allowed(overrides?: CallOverrides): Promise<BigNumber>;

    min_allowed(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    pool_rate(overrides?: CallOverrides): Promise<BigNumber>;

    psipad_factory(overrides?: CallOverrides): Promise<string>;

    rate(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    router_address(overrides?: CallOverrides): Promise<string>;

    setLPAddress(_lp_address: string, overrides?: CallOverrides): Promise<void>;

    setWhitelistEnabled(
      enabled: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    softCap(overrides?: CallOverrides): Promise<BigNumber>;

    stable_coin_fee(overrides?: CallOverrides): Promise<BigNumber>;

    start_date(overrides?: CallOverrides): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unlock(overrides?: CallOverrides): Promise<void>;

    unlock_date(overrides?: CallOverrides): Promise<BigNumber>;

    whitelistEnabled(overrides?: CallOverrides): Promise<boolean>;

    whitelisted(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    withdrawFunds(overrides?: CallOverrides): Promise<void>;

    withdrawTokens(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "CampaignLocked(uint256)"(collected?: null): CampaignLockedEventFilter;
    CampaignLocked(collected?: null): CampaignLockedEventFilter;

    "CampaignUnlocked()"(): CampaignUnlockedEventFilter;
    CampaignUnlocked(): CampaignUnlockedEventFilter;

    "Initialized(address)"(owner?: string | null): InitializedEventFilter;
    Initialized(owner?: string | null): InitializedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "TokensBought(address,uint256)"(
      user?: string | null,
      value?: null
    ): TokensBoughtEventFilter;
    TokensBought(user?: string | null, value?: null): TokensBoughtEventFilter;
  };

  estimateGas: {
    addWhitelist(
      data: BytesLike,
      whitelist: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    buyTokens(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    calculateAmount(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    campaignTokens(overrides?: CallOverrides): Promise<BigNumber>;

    collected(overrides?: CallOverrides): Promise<BigNumber>;

    doRefund(overrides?: CallOverrides): Promise<BigNumber>;

    emergencyRefund(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    end_date(overrides?: CallOverrides): Promise<BigNumber>;

    factory_address(overrides?: CallOverrides): Promise<BigNumber>;

    failed(overrides?: CallOverrides): Promise<BigNumber>;

    feeTokens(overrides?: CallOverrides): Promise<BigNumber>;

    finalized(overrides?: CallOverrides): Promise<BigNumber>;

    getGivenAmount(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRemaining(overrides?: CallOverrides): Promise<BigNumber>;

    hardCap(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _data: CampaignDataStruct,
      _token: string,
      _owner: string,
      _factory_address: string,
      _router_address: string,
      _stable_coin_fee: BigNumberish,
      _campaignTokens: BigNumberish,
      _feeTokens: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isLive(overrides?: CallOverrides): Promise<BigNumber>;

    liquidity_rate(overrides?: CallOverrides): Promise<BigNumber>;

    lock(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lock_duration(overrides?: CallOverrides): Promise<BigNumber>;

    locked(overrides?: CallOverrides): Promise<BigNumber>;

    lp_address(overrides?: CallOverrides): Promise<BigNumber>;

    max_allowed(overrides?: CallOverrides): Promise<BigNumber>;

    min_allowed(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pool_rate(overrides?: CallOverrides): Promise<BigNumber>;

    psipad_factory(overrides?: CallOverrides): Promise<BigNumber>;

    rate(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    router_address(overrides?: CallOverrides): Promise<BigNumber>;

    setLPAddress(
      _lp_address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setWhitelistEnabled(
      enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    softCap(overrides?: CallOverrides): Promise<BigNumber>;

    stable_coin_fee(overrides?: CallOverrides): Promise<BigNumber>;

    start_date(overrides?: CallOverrides): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unlock(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unlock_date(overrides?: CallOverrides): Promise<BigNumber>;

    whitelistEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    whitelisted(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    withdrawFunds(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawTokens(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addWhitelist(
      data: BytesLike,
      whitelist: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    buyTokens(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    calculateAmount(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    campaignTokens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    collected(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    doRefund(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    emergencyRefund(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    end_date(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    factory_address(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    failed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeTokens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    finalized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getGivenAmount(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRemaining(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    hardCap(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _data: CampaignDataStruct,
      _token: string,
      _owner: string,
      _factory_address: string,
      _router_address: string,
      _stable_coin_fee: BigNumberish,
      _campaignTokens: BigNumberish,
      _feeTokens: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isLive(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    liquidity_rate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lock(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lock_duration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    locked(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lp_address(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    max_allowed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    min_allowed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pool_rate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    psipad_factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    router_address(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setLPAddress(
      _lp_address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setWhitelistEnabled(
      enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    softCap(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stable_coin_fee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    start_date(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unlock(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unlock_date(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    whitelistEnabled(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    whitelisted(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawFunds(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawTokens(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
