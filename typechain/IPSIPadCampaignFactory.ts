/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export type CampaignDataStruct = {
  softCap: BigNumberish;
  hardCap: BigNumberish;
  start_date: BigNumberish;
  end_date: BigNumberish;
  rate: BigNumberish;
  min_allowed: BigNumberish;
  max_allowed: BigNumberish;
  pool_rate: BigNumberish;
  lock_duration: BigNumberish;
  liquidity_rate: BigNumberish;
  whitelist_enabled: boolean;
};

export type CampaignDataStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  boolean
] & {
  softCap: BigNumber;
  hardCap: BigNumber;
  start_date: BigNumber;
  end_date: BigNumber;
  rate: BigNumber;
  min_allowed: BigNumber;
  max_allowed: BigNumber;
  pool_rate: BigNumber;
  lock_duration: BigNumber;
  liquidity_rate: BigNumber;
  whitelist_enabled: boolean;
};

export interface IPSIPadCampaignFactoryInterface
  extends ethers.utils.Interface {
  functions: {
    "cloneAddress()": FunctionFragment;
    "createCampaign((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,bool),address,uint256,address,address)": FunctionFragment;
    "createCampaignWithOwner((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,bool),address,address,uint256,address,address)": FunctionFragment;
    "default_factory()": FunctionFragment;
    "default_router()": FunctionFragment;
    "emergencyRefund(uint256)": FunctionFragment;
    "fee_aggregator()": FunctionFragment;
    "getUserCampaigns(address)": FunctionFragment;
    "lock(uint256)": FunctionFragment;
    "setAllowedContracts(address[],bool)": FunctionFragment;
    "setCloneAddress(address)": FunctionFragment;
    "setDefaultFactory(address)": FunctionFragment;
    "setDefaultRouter(address)": FunctionFragment;
    "setFeeAggregator(address)": FunctionFragment;
    "setStableCoin(address)": FunctionFragment;
    "setStableCoinFee(uint256)": FunctionFragment;
    "setTokenFee(uint256)": FunctionFragment;
    "stable_coin()": FunctionFragment;
    "stable_coin_fee()": FunctionFragment;
    "token_fee()": FunctionFragment;
    "tokensNeeded((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,bool),uint256)": FunctionFragment;
    "unlock(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "cloneAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createCampaign",
    values: [CampaignDataStruct, string, BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "createCampaignWithOwner",
    values: [CampaignDataStruct, string, string, BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "default_factory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "default_router",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyRefund",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fee_aggregator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserCampaigns",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "lock", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "setAllowedContracts",
    values: [string[], boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setCloneAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setDefaultFactory",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setDefaultRouter",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeAggregator",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setStableCoin",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setStableCoinFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stable_coin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stable_coin_fee",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "token_fee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokensNeeded",
    values: [CampaignDataStruct, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unlock",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "cloneAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createCampaign",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createCampaignWithOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "default_factory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "default_router",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyRefund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fee_aggregator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserCampaigns",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lock", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAllowedContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCloneAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDefaultFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDefaultRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeAggregator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStableCoin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStableCoinFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stable_coin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stable_coin_fee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token_fee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokensNeeded",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unlock", data: BytesLike): Result;

  events: {
    "CampaignAdded(address,address,address)": EventFragment;
    "CampaignLocked(address,address,uint256)": EventFragment;
    "CampaignUnlocked(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CampaignAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CampaignLocked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CampaignUnlocked"): EventFragment;
}

export type CampaignAddedEvent = TypedEvent<
  [string, string, string],
  { campaign: string; token: string; owner: string }
>;

export type CampaignAddedEventFilter = TypedEventFilter<CampaignAddedEvent>;

export type CampaignLockedEvent = TypedEvent<
  [string, string, BigNumber],
  { campaign: string; token: string; collected: BigNumber }
>;

export type CampaignLockedEventFilter = TypedEventFilter<CampaignLockedEvent>;

export type CampaignUnlockedEvent = TypedEvent<
  [string, string],
  { campaign: string; token: string }
>;

export type CampaignUnlockedEventFilter =
  TypedEventFilter<CampaignUnlockedEvent>;

export interface IPSIPadCampaignFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IPSIPadCampaignFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    cloneAddress(overrides?: CallOverrides): Promise<[string]>;

    createCampaign(
      _data: CampaignDataStruct,
      _token: string,
      _tokenFeePercentage: BigNumberish,
      _factory: string,
      _router: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createCampaignWithOwner(
      _data: CampaignDataStruct,
      _owner: string,
      _token: string,
      _tokenFeePercentage: BigNumberish,
      _factory: string,
      _router: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    default_factory(overrides?: CallOverrides): Promise<[string]>;

    default_router(overrides?: CallOverrides): Promise<[string]>;

    emergencyRefund(
      campaignId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fee_aggregator(overrides?: CallOverrides): Promise<[string]>;

    getUserCampaigns(
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    lock(
      campaignId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAllowedContracts(
      _allowedContracts: string[],
      allowed: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCloneAddress(
      _cloneAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDefaultFactory(
      _default_factory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDefaultRouter(
      _default_router: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFeeAggregator(
      _fee_aggregator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setStableCoin(
      _stable_coin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setStableCoinFee(
      _stable_coin_fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTokenFee(
      _token_fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stable_coin(overrides?: CallOverrides): Promise<[string]>;

    stable_coin_fee(overrides?: CallOverrides): Promise<[BigNumber]>;

    token_fee(overrides?: CallOverrides): Promise<[BigNumber]>;

    tokensNeeded(
      _data: CampaignDataStruct,
      _tokenFeePercentage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _tokensNeeded: BigNumber }>;

    unlock(
      campaignId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  cloneAddress(overrides?: CallOverrides): Promise<string>;

  createCampaign(
    _data: CampaignDataStruct,
    _token: string,
    _tokenFeePercentage: BigNumberish,
    _factory: string,
    _router: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createCampaignWithOwner(
    _data: CampaignDataStruct,
    _owner: string,
    _token: string,
    _tokenFeePercentage: BigNumberish,
    _factory: string,
    _router: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  default_factory(overrides?: CallOverrides): Promise<string>;

  default_router(overrides?: CallOverrides): Promise<string>;

  emergencyRefund(
    campaignId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fee_aggregator(overrides?: CallOverrides): Promise<string>;

  getUserCampaigns(
    user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  lock(
    campaignId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAllowedContracts(
    _allowedContracts: string[],
    allowed: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCloneAddress(
    _cloneAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDefaultFactory(
    _default_factory: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDefaultRouter(
    _default_router: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFeeAggregator(
    _fee_aggregator: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setStableCoin(
    _stable_coin: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setStableCoinFee(
    _stable_coin_fee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTokenFee(
    _token_fee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stable_coin(overrides?: CallOverrides): Promise<string>;

  stable_coin_fee(overrides?: CallOverrides): Promise<BigNumber>;

  token_fee(overrides?: CallOverrides): Promise<BigNumber>;

  tokensNeeded(
    _data: CampaignDataStruct,
    _tokenFeePercentage: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  unlock(
    campaignId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    cloneAddress(overrides?: CallOverrides): Promise<string>;

    createCampaign(
      _data: CampaignDataStruct,
      _token: string,
      _tokenFeePercentage: BigNumberish,
      _factory: string,
      _router: string,
      overrides?: CallOverrides
    ): Promise<string>;

    createCampaignWithOwner(
      _data: CampaignDataStruct,
      _owner: string,
      _token: string,
      _tokenFeePercentage: BigNumberish,
      _factory: string,
      _router: string,
      overrides?: CallOverrides
    ): Promise<string>;

    default_factory(overrides?: CallOverrides): Promise<string>;

    default_router(overrides?: CallOverrides): Promise<string>;

    emergencyRefund(
      campaignId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    fee_aggregator(overrides?: CallOverrides): Promise<string>;

    getUserCampaigns(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    lock(campaignId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setAllowedContracts(
      _allowedContracts: string[],
      allowed: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setCloneAddress(
      _cloneAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setDefaultFactory(
      _default_factory: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setDefaultRouter(
      _default_router: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeeAggregator(
      _fee_aggregator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setStableCoin(
      _stable_coin: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setStableCoinFee(
      _stable_coin_fee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTokenFee(
      _token_fee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    stable_coin(overrides?: CallOverrides): Promise<string>;

    stable_coin_fee(overrides?: CallOverrides): Promise<BigNumber>;

    token_fee(overrides?: CallOverrides): Promise<BigNumber>;

    tokensNeeded(
      _data: CampaignDataStruct,
      _tokenFeePercentage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unlock(campaignId: BigNumberish, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "CampaignAdded(address,address,address)"(
      campaign?: string | null,
      token?: string | null,
      owner?: string | null
    ): CampaignAddedEventFilter;
    CampaignAdded(
      campaign?: string | null,
      token?: string | null,
      owner?: string | null
    ): CampaignAddedEventFilter;

    "CampaignLocked(address,address,uint256)"(
      campaign?: string | null,
      token?: string | null,
      collected?: BigNumberish | null
    ): CampaignLockedEventFilter;
    CampaignLocked(
      campaign?: string | null,
      token?: string | null,
      collected?: BigNumberish | null
    ): CampaignLockedEventFilter;

    "CampaignUnlocked(address,address)"(
      campaign?: string | null,
      token?: string | null
    ): CampaignUnlockedEventFilter;
    CampaignUnlocked(
      campaign?: string | null,
      token?: string | null
    ): CampaignUnlockedEventFilter;
  };

  estimateGas: {
    cloneAddress(overrides?: CallOverrides): Promise<BigNumber>;

    createCampaign(
      _data: CampaignDataStruct,
      _token: string,
      _tokenFeePercentage: BigNumberish,
      _factory: string,
      _router: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createCampaignWithOwner(
      _data: CampaignDataStruct,
      _owner: string,
      _token: string,
      _tokenFeePercentage: BigNumberish,
      _factory: string,
      _router: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    default_factory(overrides?: CallOverrides): Promise<BigNumber>;

    default_router(overrides?: CallOverrides): Promise<BigNumber>;

    emergencyRefund(
      campaignId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fee_aggregator(overrides?: CallOverrides): Promise<BigNumber>;

    getUserCampaigns(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lock(
      campaignId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAllowedContracts(
      _allowedContracts: string[],
      allowed: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCloneAddress(
      _cloneAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDefaultFactory(
      _default_factory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDefaultRouter(
      _default_router: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFeeAggregator(
      _fee_aggregator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setStableCoin(
      _stable_coin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setStableCoinFee(
      _stable_coin_fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTokenFee(
      _token_fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stable_coin(overrides?: CallOverrides): Promise<BigNumber>;

    stable_coin_fee(overrides?: CallOverrides): Promise<BigNumber>;

    token_fee(overrides?: CallOverrides): Promise<BigNumber>;

    tokensNeeded(
      _data: CampaignDataStruct,
      _tokenFeePercentage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unlock(
      campaignId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    cloneAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createCampaign(
      _data: CampaignDataStruct,
      _token: string,
      _tokenFeePercentage: BigNumberish,
      _factory: string,
      _router: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createCampaignWithOwner(
      _data: CampaignDataStruct,
      _owner: string,
      _token: string,
      _tokenFeePercentage: BigNumberish,
      _factory: string,
      _router: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    default_factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    default_router(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    emergencyRefund(
      campaignId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fee_aggregator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUserCampaigns(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lock(
      campaignId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAllowedContracts(
      _allowedContracts: string[],
      allowed: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCloneAddress(
      _cloneAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDefaultFactory(
      _default_factory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDefaultRouter(
      _default_router: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFeeAggregator(
      _fee_aggregator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setStableCoin(
      _stable_coin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setStableCoinFee(
      _stable_coin_fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTokenFee(
      _token_fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stable_coin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stable_coin_fee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    token_fee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokensNeeded(
      _data: CampaignDataStruct,
      _tokenFeePercentage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unlock(
      campaignId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
