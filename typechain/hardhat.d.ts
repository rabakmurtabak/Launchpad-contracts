/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "OwnableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OwnableUpgradeable__factory>;
    getContractFactory(
      name: "ERC20Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Upgradeable__factory>;
    getContractFactory(
      name: "IERC20MetadataUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20MetadataUpgradeable__factory>;
    getContractFactory(
      name: "IERC20Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Upgradeable__factory>;
    getContractFactory(
      name: "ERC165Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165Upgradeable__factory>;
    getContractFactory(
      name: "IERC165Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165Upgradeable__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "AnyswapV4ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AnyswapV4ERC20__factory>;
    getContractFactory(
      name: "ERC2612",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC2612__factory>;
    getContractFactory(
      name: "ERC677",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC677__factory>;
    getContractFactory(
      name: "IApprovalReceiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IApprovalReceiver__factory>;
    getContractFactory(
      name: "ITransferReceiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITransferReceiver__factory>;
    getContractFactory(
      name: "IPSIPadFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPSIPadFactory__factory>;
    getContractFactory(
      name: "IPSIPadRouter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPSIPadRouter__factory>;
    getContractFactory(
      name: "IFeeAggregator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFeeAggregator__factory>;
    getContractFactory(
      name: "IPSIPadCampaign",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPSIPadCampaign__factory>;
    getContractFactory(
      name: "IPSIPadCampaignFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPSIPadCampaignFactory__factory>;
    getContractFactory(
      name: "IPSIPadTokenDeployer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPSIPadTokenDeployer__factory>;
    getContractFactory(
      name: "IPSIPadTokenLockFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPSIPadTokenLockFactory__factory>;
    getContractFactory(
      name: "IAnyswapV4ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAnyswapV4ERC20__factory>;
    getContractFactory(
      name: "IBEP20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBEP20__factory>;
    getContractFactory(
      name: "IERC2612",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC2612__factory>;
    getContractFactory(
      name: "IERC677",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC677__factory>;
    getContractFactory(
      name: "IWETH",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWETH__factory>;
    getContractFactory(
      name: "PSIPadCampaign",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PSIPadCampaign__factory>;
    getContractFactory(
      name: "PSIPadCampaignFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PSIPadCampaignFactory__factory>;
    getContractFactory(
      name: "PSIPadTokenDeployer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PSIPadTokenDeployer__factory>;
    getContractFactory(
      name: "PSIPadTokenLockFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PSIPadTokenLockFactory__factory>;
    getContractFactory(
      name: "PSIPadTokenModel",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PSIPadTokenModel__factory>;
    getContractFactory(
      name: "TestBEP20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestBEP20__factory>;
    getContractFactory(
      name: "BaseToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BaseToken__factory>;
    getContractFactory(
      name: "ERC1363",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1363__factory>;
    getContractFactory(
      name: "IERC1363",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1363__factory>;
    getContractFactory(
      name: "IERC1363Receiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1363Receiver__factory>;
    getContractFactory(
      name: "IERC1363Spender",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1363Spender__factory>;
    getContractFactory(
      name: "ERC2612",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC2612__factory>;
    getContractFactory(
      name: "IERC2612",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC2612__factory>;
    getContractFactory(
      name: "AnyswapV4ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AnyswapV4ERC20__factory>;
    getContractFactory(
      name: "IAnyswapV4ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAnyswapV4ERC20__factory>;
    getContractFactory(
      name: "ERC20Burnable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Burnable__factory>;
    getContractFactory(
      name: "ERC20Capped",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Capped__factory>;
    getContractFactory(
      name: "ERC20Mintable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Mintable__factory>;
    getContractFactory(
      name: "ERC20TokenRecover",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20TokenRecover__factory>;
    getContractFactory(
      name: "IERC20Mintable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Mintable__factory>;
    getContractFactory(
      name: "IBEP20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBEP20__factory>;
    getContractFactory(
      name: "IToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IToken__factory>;
    getContractFactory(
      name: "ITokenAnySwap",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITokenAnySwap__factory>;
    getContractFactory(
      name: "Token",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Token__factory>;
    getContractFactory(
      name: "TokenAnySwap",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TokenAnySwap__factory>;

    getContractAt(
      name: "OwnableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OwnableUpgradeable>;
    getContractAt(
      name: "ERC20Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Upgradeable>;
    getContractAt(
      name: "IERC20MetadataUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20MetadataUpgradeable>;
    getContractAt(
      name: "IERC20Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Upgradeable>;
    getContractAt(
      name: "ERC165Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165Upgradeable>;
    getContractAt(
      name: "IERC165Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165Upgradeable>;
    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "IERC20Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "AnyswapV4ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AnyswapV4ERC20>;
    getContractAt(
      name: "ERC2612",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC2612>;
    getContractAt(
      name: "ERC677",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC677>;
    getContractAt(
      name: "IApprovalReceiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IApprovalReceiver>;
    getContractAt(
      name: "ITransferReceiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ITransferReceiver>;
    getContractAt(
      name: "IPSIPadFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPSIPadFactory>;
    getContractAt(
      name: "IPSIPadRouter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPSIPadRouter>;
    getContractAt(
      name: "IFeeAggregator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IFeeAggregator>;
    getContractAt(
      name: "IPSIPadCampaign",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPSIPadCampaign>;
    getContractAt(
      name: "IPSIPadCampaignFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPSIPadCampaignFactory>;
    getContractAt(
      name: "IPSIPadTokenDeployer",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPSIPadTokenDeployer>;
    getContractAt(
      name: "IPSIPadTokenLockFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPSIPadTokenLockFactory>;
    getContractAt(
      name: "IAnyswapV4ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAnyswapV4ERC20>;
    getContractAt(
      name: "IBEP20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBEP20>;
    getContractAt(
      name: "IERC2612",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC2612>;
    getContractAt(
      name: "IERC677",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC677>;
    getContractAt(
      name: "IWETH",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IWETH>;
    getContractAt(
      name: "PSIPadCampaign",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PSIPadCampaign>;
    getContractAt(
      name: "PSIPadCampaignFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PSIPadCampaignFactory>;
    getContractAt(
      name: "PSIPadTokenDeployer",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PSIPadTokenDeployer>;
    getContractAt(
      name: "PSIPadTokenLockFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PSIPadTokenLockFactory>;
    getContractAt(
      name: "PSIPadTokenModel",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PSIPadTokenModel>;
    getContractAt(
      name: "TestBEP20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestBEP20>;
    getContractAt(
      name: "BaseToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BaseToken>;
    getContractAt(
      name: "ERC1363",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1363>;
    getContractAt(
      name: "IERC1363",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1363>;
    getContractAt(
      name: "IERC1363Receiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1363Receiver>;
    getContractAt(
      name: "IERC1363Spender",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1363Spender>;
    getContractAt(
      name: "ERC2612",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC2612>;
    getContractAt(
      name: "IERC2612",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC2612>;
    getContractAt(
      name: "AnyswapV4ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AnyswapV4ERC20>;
    getContractAt(
      name: "IAnyswapV4ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAnyswapV4ERC20>;
    getContractAt(
      name: "ERC20Burnable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Burnable>;
    getContractAt(
      name: "ERC20Capped",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Capped>;
    getContractAt(
      name: "ERC20Mintable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Mintable>;
    getContractAt(
      name: "ERC20TokenRecover",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20TokenRecover>;
    getContractAt(
      name: "IERC20Mintable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Mintable>;
    getContractAt(
      name: "IBEP20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBEP20>;
    getContractAt(
      name: "IToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IToken>;
    getContractAt(
      name: "ITokenAnySwap",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ITokenAnySwap>;
    getContractAt(
      name: "Token",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Token>;
    getContractAt(
      name: "TokenAnySwap",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TokenAnySwap>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
