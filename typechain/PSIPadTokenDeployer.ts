/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export type TokenDataStruct = {
  name: string;
  symbol: string;
  initialSupply: BigNumberish;
  maximumSupply: BigNumberish;
  burnable: boolean;
  mintable: boolean;
  minterDelay: BigNumberish;
  crossChain: boolean;
  underlying: string;
  vault: string;
};

export type TokenDataStructOutput = [
  string,
  string,
  BigNumber,
  BigNumber,
  boolean,
  boolean,
  BigNumber,
  boolean,
  string,
  string
] & {
  name: string;
  symbol: string;
  initialSupply: BigNumber;
  maximumSupply: BigNumber;
  burnable: boolean;
  mintable: boolean;
  minterDelay: BigNumber;
  crossChain: boolean;
  underlying: string;
  vault: string;
};

export interface PSIPadTokenDeployerInterface extends ethers.utils.Interface {
  functions: {
    "createToken((string,string,uint256,uint256,bool,bool,uint256,bool,address,address))": FunctionFragment;
    "fee_aggregator()": FunctionFragment;
    "getUserTokens(address)": FunctionFragment;
    "initialize(address,address,uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setFeeAggregator(address)": FunctionFragment;
    "setStableCoin(address)": FunctionFragment;
    "setStableCoinFee(uint256)": FunctionFragment;
    "setTokenType(uint8,address)": FunctionFragment;
    "stable_coin()": FunctionFragment;
    "stable_coin_fee()": FunctionFragment;
    "tokenTypes(uint8)": FunctionFragment;
    "tokens(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "userTokens(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "createToken",
    values: [TokenDataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "fee_aggregator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserTokens",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeAggregator",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setStableCoin",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setStableCoinFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenType",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "stable_coin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stable_coin_fee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenTypes",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "userTokens",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "createToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fee_aggregator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeAggregator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStableCoin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStableCoinFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stable_coin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stable_coin_fee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenTypes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokens", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userTokens", data: BytesLike): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "TokenCreated(address,address,string,string,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenCreated"): EventFragment;
}

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type TokenCreatedEvent = TypedEvent<
  [string, string, string, string, BigNumber],
  {
    owner: string;
    token: string;
    name: string;
    symbol: string;
    totalSupply: BigNumber;
  }
>;

export type TokenCreatedEventFilter = TypedEventFilter<TokenCreatedEvent>;

export interface PSIPadTokenDeployer extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PSIPadTokenDeployerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    createToken(
      tokenData: TokenDataStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fee_aggregator(overrides?: CallOverrides): Promise<[string]>;

    getUserTokens(
      creator: string,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    initialize(
      _fee_aggregator: string,
      _stable_coin: string,
      _stable_coin_fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFeeAggregator(
      _fee_aggregator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setStableCoin(
      _stable_coin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setStableCoinFee(
      _stable_coin_fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTokenType(
      tokenType: BigNumberish,
      implementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stable_coin(overrides?: CallOverrides): Promise<[string]>;

    stable_coin_fee(overrides?: CallOverrides): Promise<[BigNumber]>;

    tokenTypes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    tokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    userTokens(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  createToken(
    tokenData: TokenDataStruct,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fee_aggregator(overrides?: CallOverrides): Promise<string>;

  getUserTokens(creator: string, overrides?: CallOverrides): Promise<string[]>;

  initialize(
    _fee_aggregator: string,
    _stable_coin: string,
    _stable_coin_fee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFeeAggregator(
    _fee_aggregator: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setStableCoin(
    _stable_coin: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setStableCoinFee(
    _stable_coin_fee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTokenType(
    tokenType: BigNumberish,
    implementation: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stable_coin(overrides?: CallOverrides): Promise<string>;

  stable_coin_fee(overrides?: CallOverrides): Promise<BigNumber>;

  tokenTypes(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  tokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  userTokens(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    createToken(
      tokenData: TokenDataStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    fee_aggregator(overrides?: CallOverrides): Promise<string>;

    getUserTokens(
      creator: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    initialize(
      _fee_aggregator: string,
      _stable_coin: string,
      _stable_coin_fee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setFeeAggregator(
      _fee_aggregator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setStableCoin(
      _stable_coin: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setStableCoinFee(
      _stable_coin_fee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTokenType(
      tokenType: BigNumberish,
      implementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    stable_coin(overrides?: CallOverrides): Promise<string>;

    stable_coin_fee(overrides?: CallOverrides): Promise<BigNumber>;

    tokenTypes(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    tokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    userTokens(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "TokenCreated(address,address,string,string,uint256)"(
      owner?: string | null,
      token?: null,
      name?: null,
      symbol?: null,
      totalSupply?: null
    ): TokenCreatedEventFilter;
    TokenCreated(
      owner?: string | null,
      token?: null,
      name?: null,
      symbol?: null,
      totalSupply?: null
    ): TokenCreatedEventFilter;
  };

  estimateGas: {
    createToken(
      tokenData: TokenDataStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fee_aggregator(overrides?: CallOverrides): Promise<BigNumber>;

    getUserTokens(
      creator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _fee_aggregator: string,
      _stable_coin: string,
      _stable_coin_fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFeeAggregator(
      _fee_aggregator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setStableCoin(
      _stable_coin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setStableCoinFee(
      _stable_coin_fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTokenType(
      tokenType: BigNumberish,
      implementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stable_coin(overrides?: CallOverrides): Promise<BigNumber>;

    stable_coin_fee(overrides?: CallOverrides): Promise<BigNumber>;

    tokenTypes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    userTokens(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    createToken(
      tokenData: TokenDataStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fee_aggregator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUserTokens(
      creator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _fee_aggregator: string,
      _stable_coin: string,
      _stable_coin_fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFeeAggregator(
      _fee_aggregator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setStableCoin(
      _stable_coin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setStableCoinFee(
      _stable_coin_fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTokenType(
      tokenType: BigNumberish,
      implementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stable_coin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stable_coin_fee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenTypes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    userTokens(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
